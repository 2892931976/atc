// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package atcrpc

import (
	"bytes"
	"fmt"
	"github.com/adolphlxm/atc/rpc/thrift/lib/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - Version
//  - Method
//  - Handler
type ReqHandler struct {
	Version string `thrift:"version,1,required" json:"version"`
	Method  string `thrift:"method,2,required" json:"method"`
	Handler string `thrift:"handler,3,required" json:"handler"`
}

func NewReqHandler() *ReqHandler {
	return &ReqHandler{}
}

func (p *ReqHandler) GetVersion() string {
	return p.Version
}

func (p *ReqHandler) GetMethod() string {
	return p.Method
}

func (p *ReqHandler) GetHandler() string {
	return p.Handler
}
func (p *ReqHandler) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetVersion bool = false
	var issetMethod bool = false
	var issetHandler bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetMethod = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetHandler = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"))
	}
	if !issetMethod {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Method is not set"))
	}
	if !issetHandler {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Handler is not set"))
	}
	return nil
}

func (p *ReqHandler) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *ReqHandler) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Method = v
	}
	return nil
}

func (p *ReqHandler) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Handler = v
	}
	return nil
}

func (p *ReqHandler) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReqHandler"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReqHandler) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err)
	}
	if err := oprot.WriteString(string(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err)
	}
	return err
}

func (p *ReqHandler) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("method", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:method: ", p), err)
	}
	if err := oprot.WriteString(string(p.Method)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.method (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:method: ", p), err)
	}
	return err
}

func (p *ReqHandler) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("handler", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:handler: ", p), err)
	}
	if err := oprot.WriteString(string(p.Handler)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.handler (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:handler: ", p), err)
	}
	return err
}

func (p *ReqHandler) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReqHandler(%+v)", *p)
}
