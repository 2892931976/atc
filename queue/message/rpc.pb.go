// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RpcMessage struct {
	MessageId string               `protobuf:"bytes,1,opt,name=MessageId" json:"MessageId,omitempty"`
	Code      uint32               `protobuf:"varint,2,opt,name=Code" json:"Code,omitempty"`
	Options   map[string]string    `protobuf:"bytes,100,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body      *google_protobuf.Any `protobuf:"bytes,3,opt,name=Body" json:"Body,omitempty"`
}

func (m *RpcMessage) Reset()                    { *m = RpcMessage{} }
func (m *RpcMessage) String() string            { return proto.CompactTextString(m) }
func (*RpcMessage) ProtoMessage()               {}
func (*RpcMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RpcMessage) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *RpcMessage) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RpcMessage) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *RpcMessage) GetBody() *google_protobuf.Any {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*RpcMessage)(nil), "message.RpcMessage")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x92,
	0x4c, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x0b, 0x27, 0x95, 0xa6, 0xe9, 0x27, 0xe6, 0x55,
	0x42, 0xd4, 0x28, 0x3d, 0x63, 0xe4, 0xe2, 0x0a, 0x2a, 0x48, 0xf6, 0x85, 0xa8, 0x14, 0x92, 0xe1,
	0xe2, 0x84, 0x32, 0x3d, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x10, 0x02, 0x42, 0x42,
	0x5c, 0x2c, 0xce, 0xf9, 0x29, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xbc, 0x41, 0x60, 0xb6, 0x90,
	0x15, 0x17, 0x7b, 0x7e, 0x41, 0x49, 0x66, 0x7e, 0x5e, 0xb1, 0x44, 0x8a, 0x02, 0xb3, 0x06, 0xb7,
	0x91, 0x82, 0x1e, 0xd4, 0x5a, 0x3d, 0x84, 0xb9, 0x7a, 0xfe, 0x10, 0x25, 0xae, 0x79, 0x25, 0x45,
	0x95, 0x41, 0x30, 0x0d, 0x42, 0x1a, 0x5c, 0x2c, 0x4e, 0xf9, 0x29, 0x95, 0x12, 0xcc, 0x0a, 0x8c,
	0x1a, 0xdc, 0x46, 0x22, 0x7a, 0x10, 0x67, 0xea, 0xc1, 0x9c, 0xa9, 0xe7, 0x98, 0x57, 0x19, 0x04,
	0x56, 0x21, 0x65, 0xc5, 0xc5, 0x83, 0x6c, 0x84, 0x90, 0x00, 0x17, 0x73, 0x76, 0x6a, 0x25, 0xd4,
	0x85, 0x20, 0xa6, 0x90, 0x08, 0x17, 0x6b, 0x59, 0x62, 0x4e, 0x29, 0xc4, 0x71, 0x9c, 0x41, 0x10,
	0x8e, 0x15, 0x93, 0x05, 0xa3, 0x17, 0x0b, 0x07, 0x8b, 0x80, 0x40, 0x12, 0x1b, 0xd8, 0x54, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x07, 0xec, 0x85, 0x43, 0x20, 0x01, 0x00, 0x00,
}
